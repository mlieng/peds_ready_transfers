# Parameters----
password = 'ucdavis'
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv')
edd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_edd_column_order_and_types.csv')
oshpd_folder = file.path(getwd(),'local_data','oshpd_full_data')
db_copy_and_subset = function(file, oshpd_folder,
column_designations,
destination_table = 'pdd_peds',
unified_col_order = "*",
subset_command = "agyradm<27",
diagnostic=TRUE
){
# create new temp table using format from header
dbExecute(con, paste("CREATE TABLE temp_table (",column_designations,")"))
before.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
# read data from year----
start.time = Sys.time()
command = paste0("COPY temp_table FROM '",
file.path(oshpd_folder,file),
"'DELIMITER ',' CSV Header;")
if(diagnostic) print(command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
if(diagnostic) after.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
if(diagnostic) print(cbind(before = before.records[1,1] %>% as.integer(),
after=after.records[1,1] %>% as.integer()))
# copy peds data from year----
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
# reset/clear temp table----
dbExecute(con, "DROP TABLE temp_table")
}
#
# Connect to database----
#
con = dbConnect(RPostgres::Postgres(),
dbname='oshpd_postgres',
host="localhost", port=5433,
user='postgres',
password=password)
dbListTables(con)
library(RPostgres) # database
library(tidyverse) # includes
# dplyr(data munging), ggplot2 (plotting), tidyr (tidy data)
# library(dplyr) # data munging
#
# Custom functions----
#
db_copy_and_subset = function(file, oshpd_folder,
column_designations,
destination_table = 'pdd_peds',
unified_col_order = "*",
subset_command = "agyradm<27",
diagnostic=TRUE
){
# create new temp table using format from header
dbExecute(con, paste("CREATE TABLE temp_table (",column_designations,")"))
before.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
# read data from year----
start.time = Sys.time()
command = paste0("COPY temp_table FROM '",
file.path(oshpd_folder,file),
"'DELIMITER ',' CSV Header;")
if(diagnostic) print(command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
if(diagnostic) after.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
if(diagnostic) print(cbind(before = before.records[1,1] %>% as.integer(),
after=after.records[1,1] %>% as.integer()))
# copy peds data from year----
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
# reset/clear temp table----
dbExecute(con, "DROP TABLE temp_table")
}
#
# Connect to database----
#
con = dbConnect(RPostgres::Postgres(),
dbname='oshpd_postgres',
host="localhost", port=5433,
user='postgres',
password=password)
dbListTables(con)
pdd_2011_col_types = paste(pdd_col_order$X2011_types, collapse=", ")
pdd_2011_order = paste(pdd_col_order$X2011, collapse=", ")
pdd_2016_col_types = paste(pdd_col_order$X2016_types, collapse=", ")
suppress = dbExecute(con, paste("CREATE TABLE pdd_peds (",pdd_2011_col_types,")"))
tbl(con, 'pdd_peds') %>% select(dsch_yr, agyradm) %>% collect() %>% table()
file = 'Marcin_pdd2015.csv'
column_designations = pdd_2016_col_types
subset_command='agyradm<27'
dbExecute(con, "DROP TABLE temp_table")
diagnostic=TRUE
unified_col_order = pdd_2011_order
tbl(con,'temp_table') %>% head()
dbListTables(con)
file = 'Marcin_pdd2015.csv'
column_designations = pdd_2016_col_types
subset_command='agyradm<27'
dbExecute(con, "DROP TABLE temp_table")
diagnostic=TRUE
unified_col_order = pdd_2011_order
dbExecute(con, paste("CREATE TABLE temp_table (",column_designations,")"))
before.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
# read data from year----
start.time = Sys.time()
command = paste0("COPY temp_table FROM '",
file.path(oshpd_folder,file),
"'DELIMITER ',' CSV Header;")
if(diagnostic) print(command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
if(diagnostic) after.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
if(diagnostic) print(cbind(before = before.records[1,1] %>% as.integer(),
after=after.records[1,1] %>% as.integer()))
if(diagnostic) print(list(before=before.records, after=after.records))
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
destination_table = 'pdd_peds'
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
edd_2011_col_order
edd_2011_order
pdd_2011_col_order
pdd_2011_order
pdd_col_order %>% View()
colnames(pdd_col_order)
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
edd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_edd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
colnames(pdd_col_order)
colnames(pdd_col_order) = c("x2011", "x2011_types", "x2016", "x2016_types")
pdd_col_order
pdd_col_order %>% head()
edd_col_order
edd_col_order %>% head()
colnames(edd_col_order) = c(
"x2011", "x2011_types", "x2015", "x2015_types","x2016", "x2016_types"
)
pdd_2011_order = paste(pdd_col_order$X2011, collapse=", ")
pdd_2011_order
pdd_col_order$x2011
pdd_2011_order = paste(pdd_col_order$X2011, collapse=", ")
pdd_2011_order
pdd_2011_col_types = paste(pdd_col_order$X2011_types, collapse=", ")
pdd_2011_col_types
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv')
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("x2011", "x2011_types", "x2016", "x2016_types")
paste(pdd_col_order$X2011, collapse=", ")
paste(pdd_col_order$X2011)
pdd_col_order
pdd_col_order$x2011
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
paste(pdd_col_order$X2011, collapse=", ")
str(pdd_col_order)
class(pdd_col_order)
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("x2011", "x2011_types", "x2016", "x2016_types")
str(pdd_col_order)
class(pdd_col_order)
paste(pdd_col_order$x2011)
paste(pdd_col_order$x2011, sep=', ')
paste(pdd_col_order$x2011, collapse=', ')
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("x2011", "x2011_types", "x2016", "x2016_types")
edd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_edd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
oshpd_folder = file.path(getwd(),'local_data','oshpd_full_data')
colnames(edd_col_order) = c(
"x2011", "x2011_types", "x2015", "x2015_types","x2016", "x2016_types"
)
remove(pdd_col_order)
remove(edd_col_order)
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("x2011", "x2011_types", "x2016", "x2016_types")
edd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_edd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
oshpd_folder = file.path(getwd(),'local_data','oshpd_full_data')
colnames(edd_col_order) = c(
"x2011", "x2011_types", "x2015", "x2015_types","x2016", "x2016_types"
)
paste(pdd_col_order$X2011_types, collapse=", ")
paste(pdd_col_order$X2011_types)
pdd_col_order$x2011
paste(pdd_col_order$x2011)
paste(pdd_col_order$x2011, collapse=', ')
paste(pdd_col_order$x2011_types)
paste(pdd_col_order$x2011_types, collapse=', ')
paste(pdd_col_order$X2011_types, collapse=", ")
paste(pdd_col_order$x2011_types, collapse=', ')
pdd_2011_col_types = paste(pdd_col_order$X2011_types, collapse=', ')
pdd_2011_order = paste(pdd_col_order$X2011, collapse=', ')
pdd_2016_col_types = paste(pdd_col_order$X2016_types, collapse=', ')
pdd_2011_col_types
paste(pdd_col_order$X2011_types, collapse=', ')
paste(pdd_col_order$x2011_types, collapse=', ')\
paste(pdd_col_order$x2011_types, collapse=', ')
pdd_2011_col_types = paste(pdd_col_order$x2011_types, collapse=', ')
pdd_2011_order = paste(pdd_col_order$X2011, collapse=', ')
pdd_2016_col_types = paste(pdd_col_order$X2016_types, collapse=', ')
paste(pdd_col_order$X2011, collapse=', ')
str(pdd_col_order$x2011)
paste(pdd_col_order$X2011, collapse=', ')
paste0(pdd_col_order$x2011_types, collapse=', ')
pdd_2011_col_types = paste0(pdd_col_order$x2011_types, collapse=', ')
pdd_2011_order = paste0(pdd_col_order$X2011, collapse=', ')
pdd_2016_col_types = paste0(pdd_col_order$X2016_types, collapse=', ')
pdd_2011_order
paste(pdd_col_order$x2011_types)
paste(pdd_col_order$x2011_types, collapse=', ')
paste(pdd_col_order$X2011, collapse=', ')
paste(pdd_col_order$x2011)
paste(pdd_col_order$x2011, collapse=', ')
pdd_2011_order = paste(pdd_col_order$X2011, collapse=', ')
paste(pdd_col_order$X2011, collapse=', ')
paste(pdd_col_order$x2011, collapse=', ')
pdd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_pdd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("X2011", "X2011_types", "X2016", "X2016_types")
edd_col_order = read.csv(
'local_data/oshpd_full_data/2018-12-07_edd_column_order_and_types.csv',
header = TRUE, stringsAsFactors = FALSE)
oshpd_folder = file.path(getwd(),'local_data','oshpd_full_data')
colnames(edd_col_order) = c(
"X2011", "X2011_types", "X2015", "X2015_types","X2016", "X2016_types"
)
pdd_2011_col_types = paste(pdd_col_order$X2011_types, collapse=', ')
pdd_2011_order = paste(pdd_col_order$X2011, collapse=', ')
pdd_2016_col_types = paste(pdd_col_order$X2016_types, collapse=', ')
edd_2011_col_types = paste(edd_col_order$X2011_types, collapse=', ')
edd_2011_order = paste(edd_col_order$X2011, collapse=', ')
edd_2015_col_types = paste(edd_col_order$X2015_types, collapse=', ')
edd_2016_col_types = paste(edd_col_order$X2016_types, collapse=', ')
dbListTables(con)
tbl(con, 'temp_table')
column_designations = pdd_2016_col_types
# copy peds data from year----
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
if(diagnostic) print(list(before=before.peds.number, after=after.peds.number))
column_designations = pdd_2016_col_types
column_designations
unified_col_order
unified_col_order = pdd_2011_order
pdd_2011_col_order
unified_col_order
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
if(diagnostic) print(list(before=before.peds.number, after=after.peds.number))
db_copy_and_subset = function(file, oshpd_folder,
column_designations,
destination_table = 'pdd_peds',
unified_col_order = "*",
subset_command = "agyradm<27",
diagnostic=TRUE
){
# create new temp table using format from header
dbExecute(con, paste("CREATE TABLE temp_table (",column_designations,")"))
before.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
# read data from year----
start.time = Sys.time()
command = paste0("COPY temp_table FROM '",
file.path(oshpd_folder,file),
"'DELIMITER ',' CSV Header;")
if(diagnostic) print(command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
if(diagnostic) after.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
if(diagnostic) print(cbind(before = before.records[1,1] %>% as.integer(),
after=after.records[1,1] %>% as.integer()))
# copy peds data from year----
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
# reset/clear temp table----
dbExecute(con, "DROP TABLE temp_table")
}
db_copy_and_subset('Marcin_pdd2016.csv', oshpd_folder,
pdd_2016_col_types,'pdd_peds', pdd_2011_order,
subset_command = "agyradm<22")
# reset/clear temp table----
dbExecute(con, "DROP TABLE temp_table")
db_copy_and_subset = function(file, oshpd_folder,
column_designations,
destination_table = 'pdd_peds',
unified_col_order = "*",
subset_command = "agyradm<27",
diagnostic=TRUE
){
# create new temp table using format from header
suppress_out = dbExecute(con, paste("CREATE TABLE temp_table (",column_designations,")"))
before.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
# read data from year----
start.time = Sys.time()
command = paste0("COPY temp_table FROM '",
file.path(oshpd_folder,file),
"'DELIMITER ',' CSV Header;")
if(diagnostic) print(command)
suppress_out = dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
if(diagnostic) after.records = dbGetQuery(con, "SELECT COUNT(*) from temp_table")
if(diagnostic) print(cbind(before = before.records[1,1] %>% as.integer(),
after=after.records[1,1] %>% as.integer()))
# copy peds data from year----
start.time = Sys.time()
before.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
command = paste("INSERT INTO",destination_table,
"SELECT",unified_col_order,
"FROM temp_table WHERE", subset_command)
if (diagnostic) print (command)
dbExecute(con, command)
end_time = Sys.time()
if(diagnostic) print(end_time - start.time)
after.peds.number = dbGetQuery(
con, paste("SELECT COUNT(*) from", destination_table))
if(diagnostic) print(cbind(before = before.peds.number[1,1] %>% as.integer(),
after=after.peds.number[1,1] %>% as.integer()))
# reset/clear temp table----
suppress_out = dbExecute(con, "DROP TABLE temp_table")
}
db_copy_and_subset('Marcin_pdd2016.csv', oshpd_folder,
pdd_2016_col_types,'pdd_peds', pdd_2011_order,
subset_command = "agyradm<22")
pdd_col_order = read.csv(
file.path(oshpd_folder,'2018-12-07_pdd_column_order_and_types.csv'),
header = TRUE, stringsAsFactors = FALSE)
edd_col_order = read.csv(
file.path(oshpd_folder,'2018-12-07_edd_column_order_and_types.csv'),
header = TRUE, stringsAsFactors = FALSE)
pdd_col_order = read.csv(
file.path(oshpd_folder,'2018-12-07_pdd_column_order_and_types.csv'),
header = TRUE, stringsAsFactors = FALSE)
edd_col_order = read.csv(
file.path(oshpd_folder,'2018-12-07_edd_column_order_and_types.csv'),
header = TRUE, stringsAsFactors = FALSE)
# hack - need to rename since '2011' gets read as 'i..2011'
colnames(pdd_col_order) = c("X2011", "X2011_types", "X2016", "X2016_types")
colnames(edd_col_order) = c(
"X2011", "X2011_types", "X2015", "X2015_types","X2016", "X2016_types"
)
combined_peds_cols = read.csv(
file.path(oshpd_folder,'2018-12-19_combined_table_designations.csv'),
header=TRUE, stringsAsFactors = FALSE)
combined_peds_cols
colnames(combined_peds_cols) = c(
"name", "designation", "sql_command"
)
combined_peds_cols
con = dbConnect(RPostgres::Postgres(),
dbname='oshpd_postgres',
host="localhost", port=5433,
user='postgres',
password='')
con
dbListTables(con)
source('1.1_supporting_functions.R')
